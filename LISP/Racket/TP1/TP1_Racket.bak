
;Exercice 1
(display "\nExercice 1\n")

;1.
(+ 1 3)
;l'expression n'est pas transformable

;2.
'(+ 1 3)
;l'expression n'est pas transformable

;3.
(quote(+ 1 3))
;l'expression n'est pas transformable

;4.
(car'(1 2 3))
;l'expression n'est pas transformable

;5.
(car'(2))
;l'expression n'est pas transformable

;6.
(cdr'(2))
;l'expression n'est pas transformable

;7.
(cdr'(1 2 3))
;l'expression n'est pas transformable

;8.
;(cdr(+ 1 6))
;l'expression n'est pas correct

;9.
(car'((a b) c (d e)))
;l'expression n'est pas transformable

;10.
(cdr'((a b) c (d e)))
;l'expression n'est pas transformable

;11.
(car(cdr'((a b) c d)))
(cadr'((a b) c d))

;12.
;(cdr(car(cdr'((a b) c d))))
;(cdadr'((a b) c d))
;mais l'expression de base n'est pas correct

;13.
(car(cdr'(a b c)))
(cadr'(a b c))

;14.
(car'(cdr'(a b c)))
;l'expression n'est pas transformable

;15.
(car(cdr(car'((a b) c d))))
(cadar'((a b) c d))

;16.
(car(quote(b c)))
;l'expression n'est pas transformable

;17.
(cdr(quote(b c)))
;l'expression n'est pas transformable

;18.
;(car'())
;l'expression n'est pas correct

;19.
;(cdr'())
;l'expression n'est pas correct

;20.
;(car(cdr'(1)))
;(cadr'(1))
;mais l'expression de base n'est pas correct

;21.;
;(cdr(cdr'(10)))
;(cddr'(10))
;mais l'expression de base n'est pas correct


;Exercice 2
(display "\nExercice 2\n")

;1.
(cadddr'(scheme est un langage))

;2.
(cddr'(scheme est un langage))

;3.
(car(caaaar'(((((comprenez)vous)tout)cela)?)))

;4.
(cdar'(((((comprenez)vous)tout)cela)?))

;5.
(cadr'((A B) C (1 4 3(2))))

;6.
(cadr'(scheme est un langage))

;7.
(cddddr'(scheme est un langage))
(cddar'(((((comprenez)vous)tout)cela)?))
(cdddr'((A B) C (1 4 3(2))))

;8.
(cadr'(((((comprenez)vous)tout)cela)?))

;9.
(caddr'((A B) C (1 4 3(2))))

;10.
(caddr(cdaddr'((A B) C (1 4 3(2)))))

;11.
(car'(scheme est un langage))

;12.
(caaar'(((((comprenez)vous)tout)cela)?))

;13.
(cdaar'(((((comprenez)vous)tout)cela)?))

;14.
(cadar'((A B) C (1 4 3(2))))

;15.
(car'((A B) C (1 4 3(2))))


;Exercice 3
(display "\nExercice 3\n")

;3.1

;(define 1'(1 2 (3 (4) 5)6(7 8)9))

;1.
(cons(car'(1 2 (3 (4) 5)6(7 8)9))(caddr'(1 2 (3 (4) 5)6(7 8)9)))

;2.
(cons(cadddr'(1 2 (3 (4) 5)6(7 8)9))(cons(car'(1 2 (3 (4) 5)6(7 8)9))'()))


;3.2

;1.
(cadar'((B A Z)))

;2.
(cadadr'(Z (B A) (R T)))


;3.3

;Exemple
(cons 'a (cons (cons 'b '()) '()))

;1.
(cons(cons 'a '())(cons 'b (cons 'g '())))

;2.
(cons(cons 'a '())(cons(cons 'b (cons 'g '()))'()))



;3.4
(define (somme L)
  (if (pair? L)
      (+ (car L) (somme (cdr L)))
      0))
(display "donnez moi une liste, je ferais la somme de tous ses elements: ")
(somme (read))
   

;Exercie 4
(display "\nExercice 4\n")

;1.
(define (AireCercle x)
  (* 3.14 (* x x)))
(display "donnez moi le rayon  du cercle:")
(define r (read))
(printf "voici son aire: ~a" (AireCercle r))

;2.
(define (ValeureAbsolue x)
  (sqrt(* x x)))
(display "\ndonnez moi un nombre: ")
(define n1 (read))
(printf "sa valeur absolue est: ~a \n" (ValeureAbsolue n1))




;Exercice 5
(display "\nExercice 5\n")

;1.
(define (Exo51 L)
  (list (cadr L) (car L)))
(Exo51 '(1 2))
(Exo51 '(5 3))


;2.
(define (Exo52 L)
  (if (< 1 (length L))
     (reverse(cdr(reverse L)))
     '()))
(Exo52 '(2))
(Exo52 '(1 2))
(Exo52 '(1 2 3))

;Exercice 6
(display "\nExercice 6\n")

;1.
(define (f x)
  (sqrt(+ 1 (sqrt(+ 2 (sqrt(+ 3 x)))))))
(display "\ndonnez moi un nombre: ")
(define n2 (read))
(printf "f(x) = ~a" (f n2))

;2.
(define (g x)
  (sqrt(+ 1 (sqrt(+ 2 (sqrt(+ 3 (sqrt(+ 4 (sqrt(+ 5 (sqrt(+ 6 x)))))))))))))
(display "\ndonnez moi un nombre: ")
(define n3 (read))
(printf "g(x) = ~a" (g n3))

;3.
(define (h x)
  (+ 1 (+ (sqrt(+ 3 (/ 7 x))) (+ (log(+ 1 (sqrt(+ 3 (/ 7 (* 2 x)))))) -4))))
(display "\ndonnez moi un nombre: ")
(define n4 (read))
(printf "h(x) = ~a" (h n4))



;Exercice 7
(display "\nExercice 7\n")


;1.
(define (premier L)
    (car L)) 
(premier '(1 2 3))
(premier '(4 3 1 2))

;2.
(define (second2 L)
    (cadr L)) 
(second2 '(1 2 3))
(second2 '(4 3 1 2))

;3.
(define (sauf_premier L)
  (cdr L))
(sauf_premier '(1 2 3))
(sauf_premier '(4 3 1 2))

;4.
(define (construit x L)
    (cons x L))
(construit 'A  '(1 2 3))
(construit 'A  '(4 3 1 2))



;5.
(define (singleton L)
  (if (= 1 (length L))
      #t
      #f))
(singleton '(1))
(singleton '(2))
(singleton '(1 2))
(singleton '(1 2 3))

;6-1.
(define (decalage_gauche L)
  (append (cdr L) (list(car L))))
(decalage_gauche '(1 2 3 4 5))
(decalage_gauche '(4 3 1 2))
(decalage_gauche '(1 2))


;6-2.
(define (decalage_droite L)
  (cons (car (reverse L)) (reverse(cdr(reverse L)))))
(decalage_droite '(1 2 3 4 5))
(decalage_droite '(4 3 1 2))
(decalage_droite '(1 2))


;Exercice 8
(display "\nExercice 8\n")

;1.
(define (le_plus_grand x y)
  (if (< x y)
      y
      x))
(le_plus_grand 1 1)
(le_plus_grand 5 4)
(le_plus_grand 4 5)
(le_plus_grand 15 5)

;2.
(define (signe x)
  (cond ((< x 0)"negatif")
        ((> x 0)"positif")
        (#t "nul")))
(signe 0)
(signe 1)
(signe -2)

;3.
(define (ou_ex p q)
  (if (or (and (eq? p #t)(eq? q #f)) (and (eq? p #f)(eq? q #t)))
      #t
      #f))
(ou_ex #t #t)
(ou_ex #t #f)
(ou_ex #f #t)
(ou_ex #f #f)

;4.
(define (ValeurAbsolue x)
  (sqrt(* x x)))
(define (AireCercle x)
  (* 3.14 (* x x)))
(define (AireCouronne R1 R2)
  (ValeurAbsolue(- (AireCercle R2)(AireCercle R1))))
(AireCouronne 1 1)
(AireCouronne 2 1)
(AireCouronne 1 2)
    
    
;5.
(define (Vin1 p q)
  (if (<= (* p q) 500)
      (* p q)
      (+ (/ (* p q) 10) (* p q))))
(Vin1 500 1)
(Vin1 501 1)
    
;6.
(define (Vin2 p q)
  (if (<= (* p q) 10)
      (+ (* p q) 10)
      (+ (* p q) (/ (* p q) 10) )))
(Vin2 500 1)
(Vin2 501 1)
(Vin2 5 1)



;Exercice 9

;a)
(define (k2 x)
  2)
(k2 1)
(k2 2)
(k2 3)

;b)
(define (id x)
  x)
(id 1)
(id 2)
(id 3)

;c)
(define (proj2 x y)
  y)
(proj2 1 2)
(proj2 3 4)
(proj2 5 6)

;d)
(define (distance x1 y1 x2 y2)
  (sqrt(+ (* (- x1 x2) (- x1 x2))(* (- y1 y2) (- y1 y2)))))
(distance 1 1 1 1)
(distance 1 0 -1 0)
(distance 4 0 0 3)


;Exercice 10

;a)
(define (max3 a b c)
  (if (< b a)
      (if (< c a)
          a
          c)
      (if (< c b)
          b
          c)))
(max 1 2 3)
(max 5 2 3)
(max 5 20 3)

;b)
(define (max4 a b c d)
  (if (< b a)
      (if (< c a)
          (if (< d a)
              a
              d)
          (if (< d c)
               c
               d))
       (if (< c b)
          (if (< d b)
              b
              d)
          (if (< d c)
               c
               d))))
(max4 1 2 3 4)
(max4 5 2 3 4)
(max4 5 20 3 4)
(max4 5 20 100 4)

